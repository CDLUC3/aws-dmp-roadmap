AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: 'Persistent resources for the DMPRoadmap system'

Parameters:
  VpcID:
    Type: 'AWS::EC2::VPC::Id'
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
  OldSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'

  AppName:
    Type: String
  Environment:
    Type: String
    Default: 'dev'

  ECRLifecyclePolicyTagPrefix:
    Type: String
    Default: 'latest'

  DBSnapshot:
    Type: String
    Default: 'none'

  DBInstanceType:
    Type: String
    Default: 'db.t3.small'
  DBSizeGB:
    Type: Number
    Default: 20
  DBEngine:
    Type: String
    Default: 'MySQL'
  DBName:
    Type: String

Conditions:
  InitializeDB:
    !Not [!Equals [!Ref DBSnapshot, 'none']]

Resources:
  # TODO: Consider creating the SSM parameters instead of feeding them in
  #       https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-parameter.html
  #
  # CloudFormation doesn't support SecureString for some reason so we should use secrets

  # -----------------------------------------------------------
  # Elastic Container Repository (ECR) - Hosts the application's Docker images
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_ECR.html
  # -----------------------------------------------------------
  ECRRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: !Sub '${AppName}-${Environment}-ecr'
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        # TODO: Update this to only keep the last 3 snapshots of 'untagged' since we
        #       are using 'latest' as the only tag.
        LifecyclePolicyText: !Sub >
          {
            "rules": [
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "imageCountMoreThan",
                  "countNumber": 1,
                  "tagStatus": "tagged",
                  "tagPrefixList": [
                    "${ECRLifecyclePolicyTagPrefix}"
                  ]
                },
                "description": "Ensure that we do not have more than 1 tagged version",
                "rulePriority": 1
              },
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "imageCountMoreThan",
                  "countNumber": 3,
                  "tagStatus": "untagged"
                },
                "description": "Only retain the last 3 versions",
                "rulePriority": 2
              }
            ]
          }

  # -----------------------------------------------------------
  # Identitity and Access Management (IAM)
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_IAM.html
  # -----------------------------------------------------------
  DBMonitoringRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'monitoring.rds.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole'

  # -----------------------------------------------------------
  # S3 Bucket for the application to store logos
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_S3.html
  # -----------------------------------------------------------
  #
  # TODO: The Dragonfly gem allows for storing logos in an S3 bucket but it uses Fog::Aws
  #       which requires an AWS access key and secret. We may need to fork the dragonfly
  #       s3 storage gem and modify it to use direct AWS sdk libraries since the bucket
  #       and ECS instances are running in the same VPC
  #         See: https://github.com/fog/fog-aws
  #              https://github.com/markevans/dragonfly-s3_data_store
  #
  # S3Bucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     PublicAccessBlockConfiguration:
  #       RestrictPublicBuckets: true

  # -----------------------------------------------------------
  # EC2 Security Groups for use with RDS database and S3 Bucket
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
  # -----------------------------------------------------------
  # S3SecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: !Sub 'S3 security group for ${AppName}-${Environment}'
  #     GroupName: !Sub '${AppName}-s3-sec'
  #     VpcId: !Ref VpcID

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'RDS security group for ${AppName}-${Environment}'
      GroupName: !Sub '${AppName}-rds-sec'
      VpcId: !Ref VpcID

  # -----------------------------------------------------------
  # Relational Database Service (RDS) - DB for the application
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_RDS.html
  # -----------------------------------------------------------
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub 'Subnet group for ${AppName}-${Environment}'
      SubnetIds:
        !Ref OldSubnets

  DBSubnetGroupPrivate:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub 'Subnet group for ${AppName}-${Environment}'
      SubnetIds:
        !Ref Subnets

  Database:
    Type: 'AWS::RDS::DBInstance'
    DependsOn:
      - DBSubnetGroupPrivate
      - DBSecurityGroup
    Properties:
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroupPrivate

      # If an RDS Snapshot was defined, then instruct CF to restore it
      DBSnapshotIdentifier: !If
        - InitializeDB
        - !Ref DBSnapshot
        - !Ref AWS::NoValue

      PubliclyAccessible: false
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 7 # days
      CopyTagsToSnapshot: true
      AllocatedStorage: !Ref DBSizeGB
      Port: '3306'
      Engine: !Ref DBEngine
      EngineVersion: '8.0.16'
      MonitoringInterval: '60'
      MonitoringRoleArn: !GetAtt DBMonitoringRole.Arn
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceType
      MasterUsername: '{{resolve:ssm:/uc3/dmp/roadmap/dev/db_dba_username}}'
      MasterUserPassword: '{{resolve:ssm-secure:/uc3/dmp/roadmap/dev/db_dba_password}}'

Outputs:
  ECRRepositoryName:
    Value: !Ref ECRRepository
  ECRRepositoryARN:
    Value: !GetAtt ECRRepository.Arn
  ECRRepositoryURI:
    Value: !GetAtt ECRRepository.RepositoryUri

  # S3BucketName:
  #   Value: !Ref S3Bucket
  # S3BucketARN:
  #   Value: !GetAtt S3Bucket.Arn
  # S3BucketURL:
  #   Value: !GetAtt S3Bucket.WebsiteURL

  DBInstanceName:
    Value: !Ref Database
  DBAddress:
    Value: !GetAtt Database.Endpoint.Address
  DBPort:
    Value: !GetAtt Database.Endpoint.Port
  DBName:
    Value: !Ref DBName

  # S3SecurityGroupID:
  #   Value: !GetAtt S3SecurityGroup.GroupId
  DBSecurityGroupID:
    Value: !GetAtt DBSecurityGroup.GroupId
