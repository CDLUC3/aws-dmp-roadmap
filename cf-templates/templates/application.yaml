AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: 'Serverless architecture for the DMPRoadmap system'

Parameters:
  VpcID:
    Type: 'AWS::EC2::VPC::Id'
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'

  AppName:
    Type: String
  Environment:
    Type: String
    Default: 'dev'
  DomainName:
    Type: String

  ECSDesiredServiceCount:
    Type: Number
    Default: 1

  ECRRepositoryURI:
    Type: String
  ECRRepositoryName:
    Type: String

  ALBTargetGroupARN:
    Type: String
  ALBDNSName:
    Type: String
  ALBSecurityGroupID:
    Type: String

  RailsEnv:
    Type: String
  RailsLogLevel:
    Type: String
    Default: 'warn'
    AllowedValues:
      - 'debug'
      - 'warn'
      - 'error'

  DBSecurityGroupID:
    Type: String
  DBSnapshot:
    Type: String
    Default: 'none'
  DBAddress:
    Type: String
  DBPort:
    Type: String
  DBName:
    Type: String
  DBUsername:
    Type: String
  DBPassword:
    Type: String

Resources:
  # -----------------------------------------------------------
  # Identitity and Access Management (IAM)
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_IAM.html
  # -----------------------------------------------------------
  # Role that grants the ECS container agent permission to make AWS API calls
  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'

  # Role that grants containers in the task permission to call AWS APIs on your behalf
  ECSTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRDSDataFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSESFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'

  # -----------------------------------------------------------
  # EC2 Security Groups for ECS containers (see their definitions in application.yaml)
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
  # -----------------------------------------------------------
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Fargate security group for ${AppName}-${Environment}'
      GroupName: !Sub '${AppName}-ecs-sec'
      VpcId: !Ref VpcID

  # Allow traffic to the ECS instances from the ALB
  ECSSecurityGroupIngressFromALB:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
      - ECSSecurityGroup
    Properties:
      IpProtocol: 'tcp'
      FromPort: 80
      ToPort: 80
      GroupId: !GetAtt ECSSecurityGroup.GroupId
      SourceSecurityGroupId: !Ref ALBSecurityGroupID

  # Allow the RDS instance(s) to receive traffic from the ECS instance(s)
  DBSecurityGroupIngressFromECS:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
      - ECSSecurityGroup
    Properties:
      IpProtocol: 'tcp'
      FromPort: 3306
      ToPort: 3306
      GroupId: !Ref DBSecurityGroupID
      SourceSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId

  # -----------------------------------------------------------
  # Elastic Container Service (ECS) - Containers that host the application
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_ECS.html
  # -----------------------------------------------------------
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub '${AppName}-${Environment}-fargate-clst'
      CapacityProviders:
        - 'FARGATE_SPOT'
      DefaultCapacityProviderStrategy:
        - CapacityProvider: 'FARGATE_SPOT'

  # The Application/Task definition
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - ECSTaskExecutionRole
      - ECSTaskRole
    Properties:
      Cpu: '2048' # 2 vCPU
      Memory: '4096' # 4GB
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      Family: !Sub '${AppName}-${Environment}-fargate'
      NetworkMode: 'awsvpc' # Required for Fargate!
      RuntimePlatform:
        CpuArchitecture: 'X86_64'
        OperatingSystemFamily: 'LINUX'
      ContainerDefinitions:
        -
          Image: !Ref ECRRepositoryURI
          Cpu: 2
          DisableNetworking: false
          Essential: true
          Interactive: true
          Memory: 2000
          Name: !Ref AppName
          StartTimeout: 180
          StopTimeout: 60
          # TODO: Figure out why this is invalid for FARGATE
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-create-group: true
              awslogs-group: !Sub '${AppName}-${Environment}-ecs'
              awslogs-stream-prefix: !Sub '${Environment}-ecs'
          PortMappings:
            # SES port
            - ContainerPort: 25
              Protocol: 'tcp'
            # ALB port
            - ContainerPort: 80
              Protocol: 'tcp'
            # RDS port
            - ContainerPort: 3306
              Protocol: 'tcp'
          Environment:
            - Name: 'RAILS_ENV'
              Value: !Ref RailsEnv
            - Name: 'RAILS_LOG_LEVEL'
              Value: !Ref RailsLogLevel
            - Name: 'RAILS_LOG_TO_STDOUT'
              Value: true

            - Name: 'ALB_DNS_NAME'
              Value: !Ref ALBDNSName # DomainName
            - Name: 'DMPROADMAP_HOST'
              Value: !Ref DomainName

            - Name: 'DB_SNAPSHOT'
              Value: !Ref DBSnapshot
            - Name: 'DB_HOST'
              Value: !Ref DBAddress
            - Name: 'DB_PORT'
              Value: !Ref DBPort
            - Name: 'DB_NAME'
              Value: !Ref DBName
            - Name: 'DB_USERNAME'
              Value: !Ref DBUsername
            - Name: 'DB_PASSWORD'
              Value: !Ref DBPassword

            - Name: 'DRAGONFLY_AWS'
              Value: false

  # Container Service definition
  ECSService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - ECSTaskDefinition
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref ECSDesiredServiceCount
      EnableECSManagedTags: true
      HealthCheckGracePeriodSeconds: 300 # 5 minutes for app startup
      LaunchType: 'FARGATE'
      LoadBalancers:
        - TargetGroupArn: !Ref ALBTargetGroupARN
          ContainerPort: 80
          ContainerName: !Ref AppName
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !GetAtt ECSSecurityGroup.GroupId
            - !Ref ALBSecurityGroupID
            - !Ref DBSecurityGroupID
            # - !Ref S3SecurityGroupID
          AssignPublicIp: 'ENABLED'
          Subnets: !Ref Subnets
      PlatformVersion: 'LATEST'
      PropagateTags: 'TASK_DEFINITION'
      SchedulingStrategy: 'REPLICA'
      TaskDefinition: !Ref ECSTaskDefinition

Outputs:
  ECSFargateClusterId:
    Value: !Ref ECSCluster
  ECSFargateClusterArn:
    Value: !GetAtt ECSCluster.Arn
  ECSServiceArn:
    Value: !Ref ECSService
  ECSServiceName:
    Value: !GetAtt ECSService.Name
  ECSTaskId:
    Value: !Ref ECSTaskDefinition
