AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: 'Serverless architecture for the DMPRoadmap system'

Parameters:
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'

  AppName:
    Type: String
  Environment:
    Type: String
    Default: 'dev'

  ECSSecurityGroupID:
    Type: String
  ECSDesiredServiceCount:
    Type: Number
    Default: 1

  ECRRepositoryURI:
    Type: String
  ECRRepositoryName:
    Type: String
  S3BucketName:
    Type: String

  ALBTargetGroupARN:
    Type: String

  RailsEnv:
    Type: String
  RailsLogLevel:
    Type: String
    Default: 'warn'
    AllowedValues:
      - 'debug'
      - 'warn'
      - 'error'

  DBSecurityGroupID:
    Type: String
  DBSnapshot:
    Type: String
    Default: 'none'
  DBAddress:
    Type: String
  DBPort:
    Type: String
  DBName:
    Type: String
  DBUsername:
    Type: String
  DBPassword:
    Type: String

Resources:
  # -----------------------------------------------------------
  # Identitity and Access Management (IAM)
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_IAM.html
  # -----------------------------------------------------------

  # Role that grants the ECS container agent permission to make AWS API calls
  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        # TODO: We should probably pair these back
        # - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess'
        # - 'arn:aws:iam::aws:policy/AmazonECS_FullAccess'
        # - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
        # Adding the following as advised here: https://aws.amazon.com/premiumsupport/knowledge-center/ecs-unable-to-pull-secrets/
        # - 'arn:aws:iam::aws:policy/SecretsManagerReadWrite'
        # - 'kms:Decrypt'

  # Role that grants containers in the task permission to call AWS APIs on your behalf
  ECSTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRDSDataFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'

# arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy

  # -----------------------------------------------------------
  # Elastic Container Service (ECS) - Containers that host the application
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_ECS.html
  # -----------------------------------------------------------
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub '${AppName}-${Environment}-fargate-clst'
      CapacityProviders:
        - 'FARGATE_SPOT'
      DefaultCapacityProviderStrategy:
        - CapacityProvider: 'FARGATE_SPOT'

      # TODO: For some reason this fails - would be nice as it enables CloudWatch metrics
      # ClusterSettings:
      #   Name: 'containerInsights'
      #   Value: 'enabled'

  # The Application/Task definition
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - ECSTaskExecutionRole
      - ECSTaskRole
    Properties:
      Cpu: '2048' # 2 vCPU
      Memory: '4096' # 4GB
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      Family: !Sub '${AppName}-${Environment}-fargate'
      NetworkMode: 'awsvpc' # Required for Fargate!
      RuntimePlatform:
        CpuArchitecture: 'ARM64'
        OperatingSystemFamily: 'LINUX'
      # TODO: Return to setup logging config ... super annoying that it forces/requires JSON here
      ContainerDefinitions:
        -
          # Image: !Ref InitialImage
          Image: !Ref ECRRepositoryURI
          # Command:
          #   - 'bundle'
          #   - 'exec'
          #   - 'puma'
          #   - '-C'
          #   - 'config/application.rb'
          #   - '-p'
          #   - '8080'
          Cpu: 2
          DisableNetworking: false
          Essential: true
          Interactive: true
          Memory: 2000
          Name: !Ref AppName
          StartTimeout: 180
          StopTimeout: 60
          PortMappings:
            - ContainerPort: 80
              Protocol: 'tcp'
            - ContainerPort: 443
              Protocol: 'tcp'
          # Secrets:
          #   - Name: 'DATABASE_USERNAME'
          #     ValueFrom: '/uc3/dmp/roadmap/dev/db_app_username'
          #   - Name: 'DATABASE_PASSWORD'
          #     ValueFrom: '/uc3/dmp/roadmap/dev/db_app_password'
          Environment:
            - Name: 'RAILS_ENV'
              Value: !Ref RailsEnv

            - Name: 'DB_SNAPSHOT'
              Value: !Ref DBSnapshot
            - Name: 'DB_HOST'
              Value: !Ref DBAddress
            - Name: 'DB_PORT'
              Value: !Ref DBPort
            - Name: 'DB_NAME'
              Value: !Ref DBName
            - Name: 'DB_USERNAME'
              Value: !Ref DBUsername
            - Name: 'DB_PASSWORD'
              Value: !Ref DBPassword

            - Name: 'DRAGONFLY_AWS'
              Value: true
            - Name: 'AWS_BUCKET_NAME'
              Value: !Ref S3BucketName
            - Name: 'AWS_ACCESS_KEY_ID'
              Value: ''
            - Name: 'AWS_SECRET_ACCESS_KEY'
              Value: ''
            - Name: 'AWS_REGION'
              Value: !Ref AWS::Region

  # Container Service definition
  ECSService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - ECSTaskDefinition
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref ECSDesiredServiceCount
      EnableECSManagedTags: true
      # EnableExecuteCommand: true #TODO: investigate what this means
      HealthCheckGracePeriodSeconds: 300 # 5 minutes for app startup
      LaunchType: 'FARGATE'
      LoadBalancers:
        - TargetGroupArn: !Ref ALBTargetGroupARN
          ContainerPort: 443
          ContainerName: !Ref AppName
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroupID
            - !Ref DBSecurityGroupID
          AssignPublicIp: 'ENABLED'
          Subnets: !Ref Subnets
      PlatformVersion: 'LATEST'
      PropagateTags: 'TASK_DEFINITION'
      SchedulingStrategy: 'REPLICA'
      TaskDefinition: !Ref ECSTaskDefinition

  # -----------------------------------------------------------
  # CodeBuild
  #   See:
  # -----------------------------------------------------------

  # -----------------------------------------------------------
  # CodePipeline
  #   See:
  # -----------------------------------------------------------

Outputs:
  ECSFargateClusterId:
    Value: !Ref ECSCluster
  ECSFargateClusterArn:
    Value: !GetAtt ECSCluster.Arn
  ECSServiceArn:
    Value: !Ref ECSService
  ECSServiceName:
    Value: !GetAtt ECSService.Name
  ECSTaskId:
    Value: !Ref ECSTaskDefinition
