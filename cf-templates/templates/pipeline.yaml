AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: 'Code build and pipeline for the DMPRoadmap system'

Parameters:
  VpcID:
    Type: 'AWS::EC2::VPC::Id'
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'

  AppName:
    Type: String
  Environment:
    Type: String
    Default: 'dev'
  DomainName:
    Type: String

  CodeStarConnectionArn:
    Type: String
  CodeStarConnectionCfnArn:
    Type: String

  ECSClusterName:
    Type: String
  ECSServiceName:
    Type: String

  ECRRepositoryURI:
    Type: String
  ECRRepositoryName:
    Type: String

  DMPRoadmapBranchToMonitor:
    Type: String
    Default: 'development'
  DMPRoadmapCFNBranchToMonitor:
    Type: String
    Default: 'main'

  RailsEnv:
    Type: String
  RailsLogLevel:
    Type: String
    Default: 'warn'
    AllowedValues:
      - 'debug'
      - 'warn'
      - 'error'
  ALBDNSName:
    Type: String

  DBSnapshot:
    Type: String
    Default: 'none'
  DBAddress:
    Type: String
  DBPort:
    Type: String
  DBName:
    Type: String
  DBUsername:
    Type: String
  DBPassword:
    Type: String

Resources:
  # -----------------------------------------------------------
  # Cloudwatch LogGroup for the Codepipeline
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html
  # -----------------------------------------------------------
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30

  # -----------------------------------------------------------
  # Identitity and Access Management (IAM)
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_IAM.html
  # -----------------------------------------------------------
  IAMPipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'codepipeline.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${AppName}-pipline-policy'
          PolicyDocument: !Sub >
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["codestar-connections:UseConnection"],
                  "Resource": "${CodeStarConnectionArn}"
                },
                {
                  "Effect": "Allow",
                  "Action": ["codestar-connections:UseConnection"],
                  "Resource": "${CodeStarConnectionCfnArn}"
                }
              ]
            }
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSCodePipelineFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'

  IAMCodeBuildRole:
    Type: 'AWS::IAM::Role'
    DependsOn:
      - S3Bucket
      - LogGroup
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'codebuild.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds'
      Policies:
        - PolicyName: !Sub '${AppName}-build-policy'
          PolicyDocument: !Sub >
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:AssociateKmsKey"
                  ],
                  "Resource": [
                    "${LogGroup.Arn}"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:*",
                    "ec2:CreateNetworkInterface",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeDhcpOptions",
                    "ec2:DescribeVpcs",
                    "ec2:CreateNetworkInterfacePermission"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": ["codestar-connections:UseConnection"],
                  "Resource": "${CodeStarConnectionArn}"
                }
              ]
            }

  # -----------------------------------------------------------
  # CodeBuild
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_CodeBuild.html
  # -----------------------------------------------------------
  CodeBuildSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${AppName}-build-sec'
      GroupDescription: !Sub '${AppName} CodeBuild SecurityGroup'
      VpcId: !Ref VpcID

  CodeBuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      ServiceRole: !GetAtt IAMCodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref LogGroup
          Status: 'ENABLED'
          StreamName: 'codebuild'
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        # This is required in order for the Docker daemon to work!
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: 'RAILS_ENV'
            Value: !Ref RailsEnv
          - Name: 'RAILS_LOG_LEVEL'
            Value: !Ref RailsLogLevel
          - Name: RAILS_LOG_TO_STDOUT
            Value: true

          - Name: ALB_DNS_NAME
            Value: !Ref ALBDNSName
          - Name: DMPROADMAP_HOST
            Value: !Ref DomainName

          - Name: ECR_REPOSITORY_URI
            Value: !Ref ECRRepositoryURI
          - Name: ECR_REPOSITORY_NAME
            Value: !Ref ECRRepositoryName

          - Name: DB_SNAPSHOT
            Value: !Ref DBSnapshot
          - Name: DB_HOST
            Value: !Ref DBAddress
          - Name: DB_PORT
            Value: !Ref DBPort
          - Name: DB_NAME
            Value: !Ref DBName
          - Name: DB_USERNAME
            Value: !Ref DBUsername
          - Name: DB_PASSWORD
            Value: !Ref DBPassword
          - Name: DRAGONFLY_AWS
            Value: false
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 15
      VpcConfig:
        VpcId: !Ref VpcID
        Subnets: !Ref Subnets
        SecurityGroupIds:
          - !Ref CodeBuildSecurityGroup
      Cache:
        Type: S3
        Location: !Sub '${S3Bucket}/build-cache'

  # -----------------------------------------------------------
  # CodePipeline
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-pipeline.html
  # -----------------------------------------------------------
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
      - IAMPipelineRole
    Properties:
      ArtifactStore:
        Location: !Ref S3Bucket
        # CloudFormation only supports S3 at the moment!
        Type: 'S3'
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt IAMPipelineRole.Arn
      Stages:
        - Name: 'MonitorRepos'
          Actions:
            # This action is triggered when the development branch of DMPRoadmap has a new commit
            # it's output is the commit hash
            - Name: 'DMPRoadmap'
              RunOrder: 1
              ActionTypeId:
                Category: 'Source'
                Owner: 'AWS'
                Provider: 'CodeStarSourceConnection'
                Version: '1'
              # See: https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodestarConnectionSource.html
              # for info on tying CodeBuild in
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: 'DMPRoadmap/roadmap'
                BranchName: !Ref DMPRoadmapBranchToMonitor
                OutputArtifactFormat: 'CODEBUILD_CLONE_REF'
              OutputArtifacts:
                - Name: 'dmproadmap_commit'

            # This action is triggered when the DMPRoadmap docker/CF codebase main branch receives
            # a new commit. Its output is a zip archive of the commit
            - Name: 'DmpRoadmapCfn'
              RunOrder: 1
              ActionTypeId:
                Category: 'Source'
                Owner: 'AWS'
                Provider: 'CodeStarSourceConnection'
                Version: '1'
              # See: https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodestarConnectionSource.html
              # for info on tying CodeBuild in
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionCfnArn
                FullRepositoryId: 'CDLUC3/dmp-roadmap-cfn'
                BranchName: !Ref DMPRoadmapCFNBranchToMonitor
                OutputArtifactFormat: 'CODE_ZIP'
              OutputArtifacts:
                - Name: 'dmproadmap_docker'

        - Name: 'DockerBuildPublish'
          Actions:
            # This action is triggered by either the DMPRoadmapPush or DockerPush actions. This
            # action uses the DMPRoadmapPush commit hash to the latest DockerPush zip to build
            # the Docker image
            - Name: 'Build'
              RunOrder: 2
              ActionTypeId:
                Category: 'Build'
                Owner: 'AWS'
                Provider: 'CodeBuild'
                Version: '1'
              # RoleArn: !GetAtt IAMCodeBuildRole.Arn
              Configuration:
                ProjectName: !Ref CodeBuildProject
                PrimarySource: !Sub 'dmproadmap_docker'
              InputArtifacts:
                - Name: 'dmproadmap_commit'
                - Name: 'dmproadmap_docker'
              OutputArtifacts:
                - Name: 'dmproadmap_image'

        # We don't need this for Fargate, Fargate deploys from ECR automatically
        # - Name: 'FargateDeploy'
        #   Actions:
        #     - Name: 'Deploy'
        #       RunOrder: 3
        #       ActionTypeId:
        #         Category: 'Deploy'
        #         Owner: 'AWS'
        #         Provider: 'ECS'
        #         Version: '1'
        #       Configuration:
        #         ClusterName: !Ref ECSClusterName
        #         ServiceName: !Ref ECSServiceName
        #       InputArtifacts:
        #         - Name: 'dmproadmap_image'

Outputs:
  LogGroupId:
    Value: !Ref LogGroup
  LogGroupArn:
    Value: !GetAtt LogGroup.Arn

  PipelineRoleId:
    Value: !Ref IAMPipelineRole
  PipelineRoleArn:
    Value: !GetAtt IAMPipelineRole.Arn

  CodeBuildRoleId:
    Value: !Ref IAMCodeBuildRole
  CodeBuildRoleArn:
    Value: !GetAtt IAMCodeBuildRole.Arn

  CodeBuildProjectName:
    Value: !Ref CodeBuildProject
  CodeBuildProjectArn:
    Value: !GetAtt CodeBuildProject.Arn

  PipelineId:
    Value: !Ref Pipeline
  PipelineVersion:
    Value: !GetAtt Pipeline.Version
