# Build specifications for AWS CodeBuild
#   See: https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html

# Each input artifact is extracted to its own directory by CodePipeline, the locations of which
# are stored in environment variables. The directory for the primary source artifact (this repo)
# is made available with $CODEBUILD_SRC_DIR. The directory for the DMPRoadmap push artifacts is
# made available with $CODEBUILD_SRC_DIR_uc3-dmp-roadmap-commit.

version: 0.2

phases:
  pre_build:
    commands:
      # Set some ENV variables here because CF only allows a limit of 1000 characters in the
      # EnvironmentVariable config for the Pipeline action :(
      - export RAILS_ENV=ci
      - export RAILS_LOG_TO_STDOUT=true
      - export DRAGONFLY_AWS=false
      - export AWS_VERSION=$(aws --version)

      # This is CDLUC3/dmp-roadmap-cfn codebase directory
      - echo "CDLUC3/dmp-roadmap-cfn dir -- ${CODEBUILD_SRC_DIR}"
      - echo "CDLUC3/dmp-roadmap-cfn commit -- ${CODEBUILD_RESOLVED_SOURCE_VERSION}"

      # This is the DMPRoadmap/roadmap codebase directory
      - echo "DMPRoadmap/roadmap dir -- ${CODEBUILD_SRC_DIR_dmproadmap_commit}"

      - echo $(ls -lah $CODEBUILD_SRC_DIR_dmproadmap_commit/)

      # Build a symlink in the CDLUC3/dmp-roadmap-cfn directory to DMPRoadmap/roadmap for Docker
      - echo Adding sym link to the DMPRoadmap/roadmap codebase in the CDLUC3/dmp-roadmap-cfn dir
      - if [ ${CODEBUILD_SRC_DIR}/application/roadmap ]; then rm -rf ${CODEBUILD_SRC_DIR}/application/roadmap/; fi
      - ln -s $CODEBUILD_SRC_DIR_dmproadmap_commit/ ${CODEBUILD_SRC_DIR}/application/roadmap
      - export DMPROADMAP_DIR=$CODEBUILD_SRC_DIR/application/roadmap/

      # Fetch the Git commit from the DMPRoadmap repo
      - cd $DMPROADMAP_DIR && export DMPROADMAP_COMMIT=$(git log --format="%H" -n 1 | cut -c 1-7)

      # Add the Git commit to the footer of the DMPRoadmap application
      - echo Appending Git revision number $DMPROADMAP_COMMIT to DMPRoadmap footer ...
      - 'echo "<p>Revision: ${DMPROADMAP_COMMIT}</p>" >> $DMPROADMAP_DIR/app/views/layouts/_footer.html.erb'

      # Fetch the ECR repository name
      - echo $ECR_REPOSITORY_URI >> .ecr
      - export SHORT_ECR_URI=$(awk '{gsub("$ECR_REPOSITORY_NAME", "");print}' .ecr)
      - rm .ecr

      # Set the repository URI to your ECR image and add an image tag with the first seven characters of the Git commit ID of the source.
      - echo Logging in to Amazon ECR ...
      - cd $CODEBUILD_SRC_DIR
      # CodeBuild is using cli v1 so need to use `get-login` instead of `get-login-password`
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $SHORT_ECR_URI
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      # - "IMAGE_TAG=${FULL_ECR_URI}:=latest"

      - echo $(printenv)
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - cd $CODEBUILD_SRC_DIR/application
      # - docker build -t $ECR_REPOSITORY_NAME .
      # - "docker tag $ECR_REPOSITORY_NAME $FULL_ECR_URI:latest"
      - docker build -t $SHORT_ECR_URI:latest .
      - docker tag $ECR_REPOSITORY_URI:latest $SHORT_ECR_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - cd $CODEBUILD_SRC_DIR/application
      - docker push $SHORT_ECR_URI:latest
      - docker push $SHORT_ECR_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"uc3-dmp-roadmap","imageUri":"%s"}]' $ECR_REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - cat imagedefinitions.json
artifacts:
    files: imagedefinitions.json
